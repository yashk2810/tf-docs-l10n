# Greet new pull requests that modify notebooks with a comment that includes
# Colab preview links and instructions to use the tensorflow-docs notebook tools.
# This workflow must be initiated by a repo collaborator with write access.
name: Welcome
on:
  repository_dispatch:
    types: [opened, reopened]

jobs:
  labels:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch pull request branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.pull_request.head.ref }}
    - name: Fetch master branch
      run: git fetch -u origin master:master
    - name: Add labels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_URL: ${{ github.event.client_payload.pull_request.issue_url }}
      run: |
        # Grab any changed files under a site/<lang>/ subdirectory.
        readarray -t changed_files < <(git diff --name-only master | grep 'site/.*/' || true)
        if [[ ${#changed_files[@]} == 0 ]]; then
          echo "No site/<lang>/ files modified in this pull request."
          exit 0
        fi
        declare -A labels_set  # Use as set for lang labels.
        for fp in "${changed_files[@]}"; do
          # Parse site/<lang>/ subdirectory for label.
          lang=$(echo "$fp" | sed 's|.*site.\([^/]*\)/.*|\1|')
          labels_set["$lang"]=1
        done
        # Format labels into combined string.
        labels_str=$(printf '\"%s\", ' "${!labels_set[@]}")
        # Create (and escape) JSON payload.
        json_data=$(python3 -c "import json; print(json.dumps( {\"labels\": [$labels_str]} ))")
        # Add labels to pull request.
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          "${ISSUE_URL}/labels" \
          --data "$json_data"

  message:
    runs-on: ubuntu-latest
    steps:
    - name: Fetch pull request branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.pull_request.head.ref }}
    - name: Fetch master branch
      run: git fetch -u origin master:master
    - name: Post comment
      #if: "contains(github.event.review.state, 'approved')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_URL: ${{ github.event.client_payload.pull_request.issue_url }}
        PR_NUM: ${{ github.event.client_payload.pull_request.number }}
        # Head repo is the user's fork. Ref is the branch name.
        HEAD_REPOSITORY: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        HEAD_REF: ${{ github.event.client_payload.pull_request.head.ref }}
      run: |
        echo "actor: $GITHUB_ACTOR"
        echo "github repo: $GITHUB_REPOSITORY"
        echo "head rep: $HEAD_REPOSITORY, head ref: $HEAD_REF"
        # Only want notebooks modified in this pull request.
        readarray -t changed_files < <(git diff --name-only master | grep '\.ipynb$' || true)
        if [[ ${#changed_files[@]} == 0 ]]; then
          echo "No notebooks modified in this pull request."
          exit 0
        fi
        msg="<h4>Preview</h4>\n"
        msg+="Preview and run these notebook edits with Google Colab:\n<ul>\n"
        # Link to PR branch in user's fork that is always current.
        for fp in "${changed_files[@]}"; do
          gh_path="${HEAD_REPOSITORY}/blob/${HEAD_REF}/${fp}"
          colab_url="https://colab.research.google.com/github/${gh_path}"
          msg+="<li><a href='${colab_url}'>${fp}</a></li>\n"
        done
        msg+="</ul>\n"

        msg+="<h4>Format and style</h4>\n"
        msg+="Use the TensorFlow docs <a href='https://github.com/tensorflow/docs/tree/master/tools/tensorflow_docs/tools'>notebook tools</a> to format for consistent source diffs and lint for style:\n"
        msg+="<pre>\n$ python3 -m pip install -U --user git+https://github.com/tensorflow/docs\n<br/>"
        msg+="$ python3 -m tensorflow_docs.tools.nbfmt notebook.ipynb\n<br/>"
        msg+="$ python3 -m tensorflow_docs.tools.nblint --arg=repo:tensorflow/docs-1l0n \ \n"
        msg+="&nbsp;&nbsp;&nbsp;&nbsp;--styles=tensorflow,tensorflow_docs_l10n notebook.ipynb\n</pre>\n"

        reviewnb_url="https://app.reviewnb.com/${GITHUB_REPOSITORY}/pull/${PR_NUM}/files/"
        msg+="Rendered <a href='${reviewnb_url}'>notebook diffs</a> available on ReviewNB.com.\n"

        # Escape string for JSON.
        body="$(echo -n -e $msg | python3 -c 'import json,sys; print(json.dumps(sys.stdin.read()))')"
        # Add comment to pull request.
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token $GITHUB_TOKEN" \
          "${ISSUE_URL}/comments" \
          --data "{\"body\": $body}"

  nbfmt:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install tensorflow-docs
      run: python3 -m pip install -U git+https://github.com/tensorflow/docs
    - name: Fetch pull request branch
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.pull_request.head.ref }}
    - name: Fetch master branch
      run: git fetch -u origin master:master
    - name: Format notebooks
      # Check for opt-out label.
      if: "!contains(github.event.client_payload.pull_request.labels.*.name, 'nbfmt-disable')"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_URL: ${{ github.event.client_payload.pull_request.issue_url }}
        # Head repo is the user's fork. Ref is the branch name.
        HEAD_REPOSITORY: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
        HEAD_REF: ${{ github.event.client_payload.pull_request.head.ref }}
      run: |
        # Only want notebooks modified in this pull request.
        readarray -t changed_files < <(git diff --name-only master | grep '\.ipynb$' || true)
        if [[ ${#changed_files[@]} == 0 ]]; then
          echo "No notebooks modified in this pull request."
          exit 0
        fi
        python3 -m tensorflow_docs.tools.nbfmt "${changed_files[@]}"

        if [[ -z $(git ls-files --modified) ]]; then
          echo "Notebooks already formatted."
          exit 0
        fi
        # Configure
        git config --global user.name "$GITHUB_ACTOR"
        git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
        git commit -am "nbfmt"
        git push
